C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE API_DEMAND
OBJECT MODULE PLACED IN .\Api_Demand.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S3_ApiPlat\Api_Demand.c LARGE WARNINGLEVEL(1) BROWSE INCDIR(..\
                    -C_Source\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..\C_Source
                    -\S5_ApiProtocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;..\C_Sourc
                    -e\S1_HardDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Api_Demand.lst) OBJECT(.\Api_Demand.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Api_Demand.C
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : 需量处理应用层相关函数程序C文件
   9          **note                  : MERTER FOR DL06A
  10          **                         当前最大需量用户数据均存储在外部E2P内
  11          **--------------------Version History -------------------------------------
  12          ** NO. Date         Ver      By         Description 
  13          **==============================================================
  14          ** 1   2016-04-20   v01.00   sosomj     1. frist version                             
  15          **
  16          **==============================================================
  17          */
  18          
  19          #include <MyIncludes_H.h>
  20          
  21          
  22          MD_VAR gs_md_var;           // 最大需量计算变量RAM区数据 //
  23          MD_PARAM gs_md_param;  // 最大需量计算参数RAM区数据 //
  24          
  25          /*****************************************************************************
  26          ** Function name    :api_check_Demand_para
  27          **
  28          ** Description         :检查需量参数合法性     
  29          **
  30          ** Parameters         :*u8_data 需量参数数组首地址      
  31          **
  32          ** Returned value   :flg=TRUE 合法；flg=FALSE 非法
  33          **
  34          **----------------------------------------------------------------------------
  35          ** V01.01  MJ  2016-04-23
  36          ******************************************************************************/
  37          uint8 api_check_Demand_para(MD_PARAM *s_para)
  38          {
  39   1       uint8 flg=FALSE;
  40   1       uint8 u8_period,u8_slid;
  41   1          
  42   1          u8_period = s_para->u8_period;
  43   1          u8_slid = s_para->u8_slid;
  44   1      
  45   1          if((u8_period>0)&&(u8_slid>0))  
  46   1          {
  47   2              if((u8_period<=30)&&(u8_slid<=30))  
  48   2              {
  49   3                  if(u8_slid <= u8_period)
  50   3                  {
  51   4                      if((u8_period%u8_slid)==0)
  52   4                      {
C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 2   

  53   5                          flg=TRUE;
  54   5                      }
  55   4                  }            
  56   3              }
  57   2          }
  58   1      
  59   1          return(flg);
  60   1          
  61   1      }
  62          
  63          
  64          /*****************************************************************************
  65          ** Function name    :api_init_md_data_ram
  66          **
  67          ** Description         :初始化当前需量计算RAM区数据，程序复位初始化调用        
  68          **
  69          ** Parameters         :NONE          
  70          **
  71          ** Returned value   :NONE
  72          **
  73          **----------------------------------------------------------------------------
  74          ** V01.01  MJ  2016-04-23
  75          ******************************************************************************/
  76          void api_init_md_data_ram(void)
  77          {
  78   1      
  79   1          //获取最大需量计算参数 //
  80   1          mem_read(&gs_md_param.u8_period, ADR_METER_PARAM1_MD, 2, MEM_E2P1);
  81   1      
  82   1          if(api_check_Demand_para(&gs_md_param) ==FALSE)
  83   1          {
  84   2              // 出错后取默认数据 //
  85   2              gs_md_param.u8_period =15;
  86   2              gs_md_param.u8_slid =1;
  87   2          }
  88   1      
  89   1          // 清除需量计算相关时时变量 //
  90   1          Lib_Set_String(&gs_md_var.min_var[0].cnt_sec,0,sizeof(MD_VAR));
  91   1      }
  92          
  93          /*****************************************************************************
  94          ** Function name    :api_updata_md_var_min_per_second
  95          **
  96          ** Description         :需量功率数据通道每秒累加处理，秒变化时调用    
  97          **
  98          ** Parameters         :NONE          
  99          **
 100          ** Returned value   :NONE
 101          **
 102          **----------------------------------------------------------------------------
 103          ** V01.01  MJ  2016-04-23
 104          ******************************************************************************/
 105          void api_cmp_save_md_data(uint8 ch, uint32 val_hex32)
 106          {
 107   1       MMD_DATA_UNIT st_mmd_unit;
 108   1       uint16 adr_offset;
 109   1      
 110   1          if(ch<MD_CH_NUM)
 111   1          {
 112   2              adr_offset = ( ch*(1+TARIFF_MAX_NUM)*LEN_MMD_UNIT) ;  
 113   2              mem_read(&st_mmd_unit.buf[0], ADR_BLOCK01_MMD_L0_E2P+adr_offset, LEN_MMD_UNIT, MEM_E2P1);  
 114   2              if(val_hex32>st_mmd_unit.val.val_hex32) 
C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 3   

 115   2              {
 116   3                  st_mmd_unit.val.val_hex32 =  val_hex32;
 117   3                  st_mmd_unit.val.date_rtc[0] = gs_CurDateTime.Month;
 118   3                  st_mmd_unit.val.date_rtc[1] = gs_CurDateTime.Day;
 119   3                  st_mmd_unit.val.date_rtc[2] = gs_CurDateTime.Hour;
 120   3                  st_mmd_unit.val.date_rtc[3] = gs_CurDateTime.Minute;
 121   3                  mem_db_write(ADR_BLOCK01_MMD_L0_E2P+adr_offset,&st_mmd_unit.buf[0],LEN_MMD_UNIT,MEM_E2P1);
 122   3              }
 123   2              #if (TARIFF_MAX_NUM>1)
 124   2              // 费率 最大需量处理    //
 125   2              adr_offset = ( ch*(1+TARIFF_MAX_NUM)*LEN_MMD_UNIT) +(EN_TRIFF_no*LEN_MMD_UNIT);  
 126   2              mem_read(&st_mmd_unit.buf[0], ADR_BLOCK01_MMD_L0_E2P+adr_offset, LEN_MMD_UNIT, MEM_E2P1);  
 127   2              if(val_hex32>st_mmd_unit.val.val_hex32) 
 128   2              {
 129   3                  st_mmd_unit.val.val_hex32 =  val_hex32;
 130   3                  st_mmd_unit.val.date_rtc[0] = gs_CurDateTime.Month;
 131   3                  st_mmd_unit.val.date_rtc[1] = gs_CurDateTime.Day;
 132   3                  st_mmd_unit.val.date_rtc[2] = gs_CurDateTime.Hour;
 133   3                  st_mmd_unit.val.date_rtc[3] = gs_CurDateTime.Minute;
 134   3                  mem_db_write(ADR_BLOCK01_MMD_L0_E2P+adr_offset,&st_mmd_unit.buf[0],LEN_MMD_UNIT,MEM_E2P1);
 135   3              }
 136   2              
 137   2              #endif       
 138   2          }
 139   1        
 140   1      
 141   1      }
 142          
 143          
 144          /*****************************************************************************
 145          ** Function name    :lnk_updata_md_var_power_per_second
 146          **
 147          ** Description         :每秒更新每个最大需量通道的时时功率数据    
 148          **
 149          ** Parameters         :NONE          
 150          **
 151          ** Returned value   :NONE
 152          **
 153          **----------------------------------------------------------------------------
 154          ** V01.01  MJ  2016-04-23
 155          ******************************************************************************/
 156          void lnk_updata_md_var_power_per_second(void)
 157          {
 158   1       uint8 i;
 159   1          
 160   1          for(i=0;i<MD_CH_NUM;i++)
 161   1          {
 162   2              switch(i)
 163   2              {
 164   3                  case MD_CH_AC_PT_TT:   // 当前总有功最大需量通道  //
 165   3                      gs_md_var.power_val[i] = gs_measure_var_data.gs_really[0].dw_p_val.u32;    // 需要修改为最
             -终的功率数据变量，不应该是0 //
 166   3                      break;
 167   3                  default:
 168   3                      sys_err();
 169   3              }
 170   2          }
 171   1      
 172   1      }
 173          
 174          
 175          /*****************************************************************************
C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 4   

 176          ** Function name    :api_updata_md_var_min_per_second
 177          **
 178          ** Description         :需量功率数据通道每秒累加处理，秒变化时调用    
 179          **
 180          ** Parameters         :NONE          
 181          **
 182          ** Returned value   :NONE
 183          **
 184          **----------------------------------------------------------------------------
 185          ** V01.01  MJ  2016-04-23
 186          ******************************************************************************/
 187          void api_updata_md_var_min_per_second(void)
 188          {
 189   1       uint8 i;
 190   1      
 191   1          //获取每个通道的秒功率数据 //
 192   1          lnk_updata_md_var_power_per_second();
 193   1      
 194   1          for(i=0;i<MD_CH_NUM;i++)
 195   1          {
 196   2              gs_md_var.min_var[i].cnt_sec++;
 197   2              gs_md_var.min_var[i].sum_min += gs_md_var.power_val[i] ;
 198   2          }
 199   1       
 200   1      }
 201          
 202          
 203          
 204          /*****************************************************************************
 205          ** Function name    :api_updata_md_var_slid_per_minute
 206          **
 207          ** Description         :初始化当前需量计算RAM区数据，程序复位初始化调用        
 208          **
 209          ** Parameters         :NONE          
 210          **
 211          ** Returned value   :NONE
 212          **
 213          **----------------------------------------------------------------------------
 214          ** V01.01  MJ  2016-04-23
 215          ******************************************************************************/
 216          void api_updata_md_var_slid_per_minute(void)
 217          {
 218   1       uint8 i,j;
 219   1       uint32 sum_hex32;
 220   1      
 221   1          // 需量参数检查 //
 222   1        if(api_check_Demand_para(&gs_md_param) ==FALSE)
 223   1          {
 224   2              // 出错后取默认数据 //
 225   2              gs_md_param.u8_period =15;
 226   2              gs_md_param.u8_slid =1;
 227   2          }
 228   1      
 229   1          for(i=0;i<MD_CH_NUM;i++)
 230   1          {
 231   2              // 计算每分钟时时平均功率(时时需量) //
 232   2              if(gs_md_var.min_var[i].cnt_sec !=0)
 233   2              {
 234   3                  gs_md_var.min_var[i].val_min = (gs_md_var.min_var[i].sum_min/gs_md_var.min_var[i].cnt_sec);
 235   3                  gs_md_var.min_var[i].cnt_sec  = 0; 
 236   3                  gs_md_var.min_var[i].sum_min = 0;
 237   3              }
C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 5   

 238   2              
 239   2              // 更新滑差计算方法相关数据 //
 240   2              if(gs_md_var.slid_var[i].cnt_min<gs_md_param.u8_period)
 241   2              {
 242   3                  gs_md_var.slid_var[i].date_buff[gs_md_var.slid_var[i].cnt_min] = gs_md_var.min_var[i].val_min;
 243   3                  gs_md_var.slid_var[i].cnt_min++;
 244   3                  if(gs_md_var.slid_var[i].cnt_min==gs_md_param.u8_period)
 245   3                  {
 246   4                      gs_md_var.slid_var[i].cal_flg = TRUE;
 247   4                      gs_md_var.slid_var[i].cnt_min = 0;
 248   4                  }
 249   3      
 250   3                  if(gs_md_var.slid_var[i].cal_flg == TRUE)
 251   3                  {
 252   4                      sum_hex32 =0;
 253   4                      if((gs_md_var.slid_var[i].cnt_min %gs_md_param.u8_slid)==0 )   
 254   4                      {
 255   5                          for(j=0;j<gs_md_param.u8_period;j++)
 256   5                          {
 257   6                              sum_hex32 += gs_md_var.slid_var[i].date_buff[j];    
 258   6                          }
 259   5                          gs_md_var.slid_var[i].val_slid =sum_hex32/gs_md_param.u8_period;
 260   5                          api_cmp_save_md_data(i, gs_md_var.slid_var[i].val_slid );
 261   5                      }
 262   4                  }
 263   3              }
 264   2      
 265   2          }
 266   1      
 267   1      }
 268          
 269          
 270          /*****************************************************************************
 271          ** Function name    :api_clr_current_energy_data
 272          **
 273          ** Description         :当前电能数据的清零处理
 274          **
 275          ** Parameters         :NONE          
 276          **
 277          ** Returned value   :NONE
 278          **
 279          **----------------------------------------------------------------------------
 280          ** V01.01  MJ  2016-04-23
 281          ******************************************************************************/
 282          void api_clr_current_MD_data(void)
 283          {
 284   1          MD_USER_DATA tmp_ms_user_data;
 285   1      
 286   1          //当前需量清零  //
 287   1          Lib_Clr_String(&tmp_ms_user_data.us_val[0][0].buf[0],LEN_MMD_CURRENT);
 288   1          mem_db_write(ADR_BLOCK01_MMD_L0_E2P,&tmp_ms_user_data.us_val[0][0].buf[0], LEN_MMD_CURRENT, MEM_E2P1);
             -   
 289   1          CLRWDT();
 290   1          // 清除需量计算相关时时变量 //
 291   1          Lib_Set_String(&gs_md_var.min_var[0].cnt_sec,0,sizeof(MD_VAR));
 292   1      }
 293          
 294          
 295          
 296          
 297          /***************************************************************
 298          *    END
C51 COMPILER V9.01   API_DEMAND                                                            01/31/2019 11:34:25 PAGE 6   

 299          ****************************************************************/
 300          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    143      65
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
