C51 COMPILER V9.01   DRV_CORE                                                              01/31/2019 11:34:19 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DRV_CORE
OBJECT MODULE PLACED IN .\Drv_core.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S1_HardDrv\V9811A_MCU\Drv_core.c LARGE WARNINGLEVEL(1) BROWSE I
                    -NCDIR(..\C_Source\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;..
                    -\C_Source\S5_ApiProtocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU;.
                    -.\C_Source\S1_HardDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Drv_core.lst) OBJECT(.\Drv_core.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Drv_core.c
   6          **Author                : maji
   7          **date                  : 2016-04-20 
   8          **description   : MCU core内核模块的硬件驱动C代码
   9          **note                  : V9811A ，MERTER FOR DL03C
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          
  22          /*******************************************************************************************
  23          ** 函数名称: Set_McuClock
  24          ** 函数描述:  MCU主频配置
  25          ** 输入参数: osc :   FSYSCLK_800k    FSYSCLK_1M6 
  26          **                         PHZ :  50 0r  60 HZ
  27          ** 说明    : 
  28          *******************************************************************************************/
  29          uint8 Set_McuClock(uint32 u32_freq )
  30          {
  31   1          uint8 i=0;
  32   1      
  33   1          FWC=0;
  34   1          FSC=0;
  35   1          CtrlCLK|=(BIT6+BIT7); // 开启BGP 以及PLL电路//
  36   1      #if (C_Fq == 60)
                  CtrlPLL = BIT5;
              #else
  39   1          CtrlPLL = 0; 
  40   1      #endif           
  41   1      
  42   1          switch(u32_freq)
  43   1          {
  44   2              case FSYSCLK_800k:
  45   2                  CtrlCLK&=~(BIT0+BIT1);   // 00为 1x FSYSCLK_800k
  46   2                  CtrlPLL =0;     //BIT5 =0 为50HZ
  47   2                  break;
  48   2      
  49   2              case FSYSCLK_1M6:
  50   2                  CtrlCLK |= BIT0;
  51   2                  CtrlCLK&=~(BIT1);   // 10为 2x FSYSCLK_800k
  52   2                  CtrlPLL =0;     //BIT5 =0 为50HZ
C51 COMPILER V9.01   DRV_CORE                                                              01/31/2019 11:34:19 PAGE 2   

  53   2                  break;
  54   2      
  55   2              case FSYSCLK_3M2:
  56   2                  CtrlCLK&=~(BIT0);   // 10 为 4x FSYSCLK_800k
  57   2                  CtrlCLK |= BIT1;
  58   2                  break;
  59   2      
  60   2              case FSYSCLK_6M5:
  61   2                  CtrlCLK |= BIT0;   // 11 为  8x FSYSCLK_800k
  62   2                  CtrlCLK |= BIT1;
  63   2                  break;
  64   2      
  65   2              case FSYSCLK_13M:
  66   2                  CtrlCLK |= BIT0;     // 11 为  8x FSYSCLK_800k
  67   2                  CtrlCLK |= BIT1;
  68   2                  CtrlPLL |=BIT6;              // mcuclock x 2
  69   2                  break;
  70   2      
  71   2              case FSYSCLK_26M:
  72   2                  CtrlCLK |= BIT0;     // 11 为  8x FSYSCLK_800k
  73   2                  CtrlCLK |= BIT1;
  74   2                  CtrlPLL |=(BIT7+BIT6);       //  mcuclock x 4 
  75   2                  break;
  76   2      
  77   2              default:
  78   2                  sys_err();  
  79   2              break;
  80   2          }
  81   1      
  82   1          while(!(PLLLCK&BIT0))
  83   1          {
  84   2              i++;
  85   2              if(i>50)
  86   2              {
  87   3                  return FALSE;       //在一定时间内没有锁定
  88   3              }
  89   2          }
  90   1          MCUFRQ=1; //MCU时钟源: PLL时钟
  91   1          i=0;
  92   1      
  93   1          while(!(MCUFRQ))
  94   1          {
  95   2              i++;
  96   2              if(i>50)
  97   2              {
  98   3                  return FALSE;       //在一定时间内没有锁定
  99   3              }
 100   2          }
 101   1      
 102   1          CtrlCry0=0;                 //调整启振波形
 103   1          CryCtrl1=3;                // 使用RTC   
 104   1          CryCtrl2|=BIT5;        // 停振复位功能//
 105   1      
 106   1          return TRUE;
 107   1      }
 108          
 109          /*******************************************************************************************
 110          ** 函数名称: Set_EmuClock
 111          ** 函数描述: 计量时钟设置
 112          ** 输入参数: Tpye:   EMUCLK_OFF 关计量
 113                                        EMUCLK_800k  时钟选择
 114          **                         
C51 COMPILER V9.01   DRV_CORE                                                              01/31/2019 11:34:19 PAGE 3   

 115          ** 说明    : 注意EMU的主频必须是ADC主频的4倍或8倍
 116          *******************************************************************************************/
 117          uint8 Set_EmuClock(uint32 u32_freq)
 118          {
 119   1          uint8 i=0;
 120   1      
 121   1          PMG = 0;
 122   1          CtrlCLK|=(BIT6+BIT7); // 开启BGP 以及PLL电路//
 123   1       
 124   1          switch(u32_freq)
 125   1          {
 126   2              case EMUCLK_OFF:
 127   2                  PMG = 1;
 128   2                  return TRUE;
 129   2      
 130   2              case EMUCLK_800k:
 131   2                  CtrlCLK&=~(BIT3+BIT2);   // 00为  1*EMUCLK_800k
 132   2                  CtrlCLK&=~(BIT5+BIT4);   // 00为  1*ADCCLK_204k
 133   2                  break;
 134   2      
 135   2              case EMUCLK_1M6:
 136   2                  CtrlCLK |= BIT2;
 137   2                  CtrlCLK&=~(BIT3);   // 01 为 2x EMUCLK_800k
 138   2      
 139   2                      CtrlCLK |= BIT4;
 140   2                      CtrlCLK&=~(BIT5);   // 01 为 2x ADCCLK_204k
 141   2                  break;
 142   2              
 143   2              case  EMUCLK_3M2:
 144   2                  CtrlCLK&=~(BIT2);   // 10 为 4x EMUCLK_800k
 145   2                  CtrlCLK |= BIT3;
 146   2      
 147   2                  CtrlCLK&=~(BIT4);   // 10 为 4x ADCCLK_204k
 148   2                  CtrlCLK |= BIT5;
 149   2                  break;
 150   2      
 151   2              default:
 152   2                  sys_err();  
 153   2              break;
 154   2         }
 155   1      
 156   1          while(!(PLLLCK&BIT0))
 157   1          {
 158   2              i++;
 159   2              if(i>50)
 160   2              {
 161   3                  return FALSE;       //在一定时间内没有锁定
 162   3              }
 163   2          }
 164   1      
 165   1          MEAFRQ=1;   //MEA时钟源: PLL时钟
 166   1          i=0;
 167   1          while(!(MEAFRQ))
 168   1          {
 169   2              i++;
 170   2              if(i>50)
 171   2              {
 172   3                  return FALSE;       //在一定时间内没有锁定
 173   3              }
 174   2          }
 175   1              
 176   1          return TRUE;
C51 COMPILER V9.01   DRV_CORE                                                              01/31/2019 11:34:19 PAGE 4   

 177   1      }
 178          
 179          /*******************************************************************************************
 180          ** 函数名称: Set_McuSleep
 181          ** 函数描述: 系统休眠处理
 182          ** 输入参数: NONE
 183          ** 输出参数: 无
 184          ** 说明    : 
 185          *******************************************************************************************/
 186          void Set_McuSleep(void)
 187          {
 188   1          uint8 i;
 189   1          FWC=0;
 190   1          FSC=0;
 191   1      
 192   1          CtrlADC6=0;             //关闭所有的ADC
 193   1          CtrlLDO = 0x00;
 194   1      
 195   1         for(i=0;i<20;i++);      //等待
 196   1          PMG=1;                  //关闭计量时钟
 197   1      
 198   1          if((Systate&BIT0)==0x01)
 199   1          {   
 200   2              sys_err();        //如果上电则休眠处理 //
 201   2          }
 202   1      
 203   1          MCUFRQ=0;
 204   1          while(MCUFRQ);
 205   1      
 206   1          if((Systate&BIT0)==0x01)
 207   1          {   
 208   2              sys_err();        //如果上电则休眠处理 //
 209   2          }
 210   1      
 211   1          for(i=0;i<3;i++);       //等待//
 212   1          CtrlCLK=0x00;
 213   1          while(CtrlCLK);
 214   1      
 215   1          SLEEP0 = 1;
 216   1          Lib_Delay_2us(10);    // 5 OSC //
 217   1      }
 218          
 219          
 220          /*******************************************************************************************
 221          ** 函数名称: Set_Mcu_core
 222          ** 函数描述: 系统内核部分配置
 223          ** 输入参数: NONE
 224          ** 输出参数: 无
 225          ** 说明    : 
 226          *******************************************************************************************/
 227          void Set_Mcu_core(void)
 228          {
 229   1           CtrlBGP = BIT2;    //此条会影响RTC温补校准和高低温的计量误差  //
 230   1      }
 231          
 232          /*******************************************************************************************
 233          **    END
 234          *******************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    494    ----
C51 COMPILER V9.01   DRV_CORE                                                              01/31/2019 11:34:19 PAGE 5   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
