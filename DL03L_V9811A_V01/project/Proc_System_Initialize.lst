C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PROC_SYSTEM_INITIALIZE
OBJECT MODULE PLACED IN .\Proc_System_Initialize.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\C_Source\S0_System\Proc_System_Initialize.c LARGE WARNINGLEVEL(1) BROWSE
                    - INCDIR(..\C_Source\S0_System;..\C_Source\S1_HardDrv;..\C_Source\S2_MyLib;..\C_Source\S3_ApiPlat;..\C_Source\S4_ApiUser;
                    -..\C_Source\S5_ApiProtocol;..\C_Source\S6_MyIncludes;..\C_Source\S1_HardDrv\V9811A_EMU;..\C_Source\S1_HardDrv\V9811A_MCU
                    -;..\C_Source\S1_HardDrv\E2P_24CXXX) DEBUG OBJECTEXTEND PRINT(.\Proc_System_Initialize.lst) OBJECT(.\Proc_System_Initiali
                    -ze.obj)

line level    source

   1          /*
   2          *****************Copyright (c)*************************************
   3          **      Hangzhou Xili Watthour Meter Manufacture Co., Ltd. 
   4          **--------------file info--------------------------------------------
   5          **name                  : Proc_System_Initialize.c
   6          **Author                : maji
   7          **date                  : 2016-04-20
   8          **description   : 系统复位初始化处理相关C代码
   9          **note                  : V9811A ，MERTER FOR DL03C
  10          **--------------------Version History -------------------------------------
  11          ** NO. Date         Ver      By         Description 
  12          **==============================================================
  13          ** 1   2016-04-26   v01.00   sosomj     1. frist version                             
  14          **
  15          **==============================================================
  16          */
  17          
  18          #include <MyIncludes_H.h>
  19          
  20          
  21          /****************************************************************
  22          Function:           Proc_Initialize_systerm_normal_mode 
  23          Description:            系统上电/复位初始化函数 
  24          Input:                  no
  25          Parameters:             no
  26          Returns:                        no                        
  27          Others:         
  28          ****************************************************************/
  29          void Proc_handle_when_systerm_reset(void)
  30          {
  31   1         #if(MCU_TYPE == MCU_G80F92X)   // 中颖芯片 //
                     IEN0=0x00;
                 IEN1=0x00;
                  gs_sys_globaL_var.reset_status = RSTSTAT;
                 Switch_Clk_4P096M();
                 #endif
  37   1      
  38   1         #if(MCU_TYPE == MCU_V98XX)   //万工芯片 //
  39   1         gs_sys_globaL_var.reset_status = Systate;
  40   1               #ifndef _RTC_CAL    //不需要温补操作时执行下面内容 //
                        Clr_RTC_AdjParam();
                        #endif
  43   1      
  44   1          SPCFNC=1;           //调整FLASH功耗
  45   1          XBYTE[0x0402]=0x86;
  46   1          SPCFNC=0;
  47   1          CBANK=0X01;
  48   1         Set_McuClock(FSYSCLK_800k);   //SetMCUPLL();  6Mhz
  49   1         #endif
  50   1      
  51   1          Init_GPIO_sleep();
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 2   

  52   1          E2p_IIC_Initail();
  53   1          E2p_Stop_i2c();
  54   1      
  55   1      }
  56          
  57          /****************************************************************
  58          Function:               Proc_Initialize_INRam
  59          Description:            上电初始化RAM相关
  60          Input:                  no
  61          Parameters:             no
  62          Returns:                        no                        
  63          Others:         
  64          ****************************************************************/
  65          void Proc_Initialize_INRam(void)
  66          {
  67   1          //////////dubge   将E2P初始化////////////
  68   1      //    mem_db_clr(0XA5);
  69   1      //    CLRWDT();
  70   1          ////////////////////////////
  71   1          mem_db_check();  //数据校验检查 //
  72   1          CLRWDT();
  73   1      ////////////////////////////////////////////////
  74   1      //  S0_System 区相关RAM初始化
  75   1      ////////////////////////////////////////////////
  76   1          Proc_sys_data_init();
  77   1          Proc_init_tou_var();
  78   1          Proc_init_Check_var();
  79   1      
  80   1      ////////////////////////////////////////////////
  81   1      //  S1_HardDrv 区相关RAM初始化
  82   1      ////////////////////////////////////////////////
  83   1          Init_EMU_RAM();    
  84   1      
  85   1      ////////////////////////////////////////////////
  86   1      //  S3_ApiPlat 区相关RAM初始化
  87   1      ////////////////////////////////////////////////
  88   1          api_init_md_data_ram();
  89   1          api_init_current_energy_data_ram();
  90   1      
  91   1          api_Measure_ram_INIT();
  92   1          api_measure_VBAT_pre_min();
  93   1          api_measure_temperature_pre_min();
  94   1      
  95   1      #if (TARIFF_MAX_NUM>1)
  96   1          api_update_triffNo_pre_minute();   
  97   1      #endif
  98   1      
  99   1      #if (BILL_MAX_NUM>1)
 100   1          api_handl_settle_when_powerUp();   
 101   1      #endif
 102   1      
 103   1      ////////////////////////////////////////////////
 104   1      //  S4_ApiUser 区相关RAM初始化
 105   1      ////////////////////////////////////////////////
 106   1          api_init_display();
 107   1      
 108   1      
 109   1      }
 110          
 111          
 112          /****************************************************************
 113          Function:               void SysInitialize(void)  
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 3   

 114          Description:            系统上电/复位初始化函数 
 115          Input:                  no
 116          Parameters:             no
 117          Returns:                        no                        
 118          Others:         
 119          ****************************************************************/
 120          void Proc_sleep_when_reset(void)
 121          {
 122   1          switch (gs_sys_globaL_var.reset_status&0x3c)
 123   1          {
 124   2              // IO唤醒，可能来源为按键IO //
 125   2              
 126   2                               case BIT3: 
 127   2                 // if(KEY_READ_DIS() == FALSE)       // 按键 //
 128   2                  {
 129   3                      Set_McuClock(FSYSCLK);   //SetMCUPLL();  6Mhz  //
 130   3                      // 1 打开液晶显示//
 131   3                      Init_LCD();
 132   3                      api_check_current_energy_data();                //  初始化电量//
 133   3                      api_handl_dis_sleep_key();        //处理显示项目 //
 134   3      //                SetExtRTC(0x01,0x00);// 秒唤醒//
 135   3      //                Set_McuSleep();       // 处理结束后休眠 //
 136   3                  }
 137   2              break;   
 138   2      
 139   2              // RTC唤醒，可能来源唤醒显示内容切换//
 140   2              //default:
 141   2              case BIT2:
 142   2                   Set_McuClock(FSYSCLK);   //SetMCUPLL();  6Mhz  //                                  
 143   2                  if(INTRTC ==0)   
 144   2                  {   
 145   3                      if(gs_dis_ctl_var.keep_sec[1]>0)   gs_dis_ctl_var.keep_sec[1]--;
 146   3                      if(gs_dis_ctl_var.keep_sec[1] ==0)  
 147   3                      {
 148   4                          api_handl_dis_sleep();            //下电液晶显示处理 //    
 149   4      //                    SetExtRTC(0x01,0x02);// 小时唤醒
 150   4      //                    CLRWDT();
 151   4      //                    if(CheckPOWERUP()==TRUE)     sys_err();   
 152   4      //                    Set_McuSleep();       // 处理结束后休眠 //    
 153   4                      }
 154   3      //                else
 155   3      //                {
 156   3      ////                    SetExtRTC(0x01,0x00);// 秒唤醒//
 157   3      ////                    CLRWDT();
 158   3      ////                    if(CheckPOWERUP()==TRUE)     sys_err();   
 159   3      ////                    Set_McuSleep();       // 处理结束后休眠 //    
 160   3      //                }
 161   3                  }
 162   2      //            else
 163   2      //            {
 164   2      ////                api_measure_temperature_pre_min();     // 注意这个函数可选进行RTC温度补偿//
 165   2      ////                SetExtRTC(0x01,0x02);// 小时唤醒
 166   2      //                CLRWDT();
 167   2      //                if(CheckPOWERUP()==TRUE)     sys_err();   
 168   2      ////                Set_McuSleep();       // 处理结束后休眠 //    
 169   2      //            } 
 170   2                  break;
 171   2                                                      
 172   2              
 173   2          }
 174   1                      CLRWDT();
 175   1      //              mem_read(&gs_even_fun_var.even_fun_doingflg[ID_CLASS_II_COVER-ID_CLASS_II_min],ADR_CLASS2FLG_START_E2P
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 4   

             -+ (ID_CLASS_II_COVER-ID_CLASS_II_min)* LEN_CLASSII_flg,LEN_CLASSII_flg,MEM_E2P1);     
 176   1      //                                      
 177   1      //    if(Judge_ERR_COVER_key()==TRUE)
 178   1      //            api_pwl_cover_even_class_recode(ID_CLASS_II_COVER-ID_CLASS_II_min,START);
 179   1      //    else 
 180   1      //                              api_pwl_cover_even_class_recode(ID_CLASS_II_COVER-ID_CLASS_II_min,END); 
 181   1      
 182   1          if(Judge_ERR_COVER_key()==TRUE)api_deal_even_class_recode(ID_CLASS_II_COVER,START);
 183   1          else api_deal_even_class_recode(ID_CLASS_II_COVER,END);
 184   1                      
 185   1          if(CheckPOWERUP()==TRUE)     sys_err();   
 186   1      
 187   1      //  api_measure_temperature_pre_min();     // 注意这个函数可选进行RTC温度补偿//
 188   1      //              Init_GPIO_sleep();
 189   1          SetExtRTC(0x01,0x00);// 小时唤醒
 190   1          CLRWDT();
 191   1      //    if(CheckPOWERUP()==TRUE)     sys_err();   
 192   1          Set_McuSleep();       // 处理结束后休眠 //     
 193   1          Set_McuSleep();       // 处理结束后休眠 //                  
 194   1      }
 195                  
 196          
 197          
 198          
 199          /****************************************************************
 200          Function:           Proc_Initialize_systerm_normal_mode 
 201          Description:            系统上电/复位初始化函数 
 202          Input:                  no
 203          Parameters:             no
 204          Returns:                        no                        
 205          Others:         
 206          ****************************************************************/
 207          void Proc_Initialize_systerm_normal_mode(void)
 208          {
 209   1          Init_RTC();
 210   1          Init_LCD();
 211   1          
 212   1          Set_McuClock(FSYSCLK);   //SetMCUPLL();  6Mhz
 213   1          Init_GPIO_run();
 214   1          Lib_Delay_ms(200);
 215   1          CLRWDT();
 216   1      
 217   1          Proc_Initialize_INRam();  //初始化RAM区 //
 218   1              
 219   1          Init_Timer();       
 220   1          Init_RTC();
 221   1          //Open_SecOut();
 222   1          Init_UART2_hard(BPS300);  //IR  //
 223   1          Init_UART4_hard(BPS300);  //RS485  //
 224   1          Init_LCD();
 225   1          Full_SEG(0xFF);
 226   1          api_handl_COMM_FRAME_ERROR(UART_CH0_IR);
 227   1          api_handl_COMM_FRAME_ERROR(UART_CH1_RS);  
 228   1          Init_EMU(NORMAL_MODE);
 229   1              
 230   1                gs_even_fun_var.into_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 231   1                gs_even_fun_var.esc_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间
 232   1                api_deal_even_class_recode(ID_CLASS_II_PWN,END);
 233   1                
 234   1                      KEY_ERR_COVER_INITLIZE() ;
 235   1      }
 236          
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 5   

 237          
 238          
 239          /****************************************************************
 240          Function:          Proc_Initialize_systerm_reset
 241          Description:        系统上电/复位初始化函数 
 242          Input:                  no
 243          Parameters:             no
 244          Returns:                        no                        
 245          Others:         
 246          ****************************************************************/
 247          void Proc_Initialize_systerm_reset(void)
 248          {
 249   1      
 250   1          Proc_handle_when_systerm_reset();   // 系统复位的处理函数，注意MCU不同时需要进行修改函数内容 //
 251   1          Set_Mcu_core();
 252   1         //Lib_Delay_ms(110);         //滤波处理  //
 253   1         CLRWDT();   
 254   1      
 255   1      
 256   1          if(CheckPOWERUP()== FALSE)          //无市电
 257   1          {
 258   2              #if((_METER_TYPE_CFG ==_METER_TYPE_1P2W_0) ||(_METER_TYPE_CFG ==_METER_TYPE_1P2W_1) )
 259   2              gs_sys_globaL_var.work_mode = SLEEP_MODE;  
 260   2              #endif
 261   2      
 262   2              #if((_METER_TYPE_CFG ==_METER_TYPE_1P3W_10) ||(_METER_TYPE_CFG ==_METER_TYPE_1P3W_11) )
                      gs_sys_globaL_var.work_mode = SLEEP_MODE;  
                      #endif
 265   2                      
 266   2              //Proc_sleep_when_reset();
 267   2          }
 268   1          else
 269   1         {
 270   2              gs_sys_globaL_var.work_mode = NORMAL_MODE;
 271   2         }
 272   1      
 273   1      
 274   1          ////////////////////////////////////////////////////
 275   1          
 276   1          if(gs_sys_globaL_var.work_mode == SLEEP_MODE)
 277   1          {
 278   2              Proc_sleep_when_reset();                                   // 休眠初始化//
 279   2          }
 280   1          else
 281   1          {
 282   2              #if(_METER_TYPE_CFG == _METER_TYPE_1P2W_2)
                       if(gs_sys_globaL_var.work_mode == DLX_MODE)   //  掉零线初始化//
                      {
                          Proc_Initialize_systerm_dlx_mode(); 
                      }
                      else
                      {
                          Proc_Initialize_systerm_normal_mode();    //  市电供应情况下的初始化//
                      }
                       #endif
 292   2      
 293   2             ////////////////////////////////////////////////////
 294   2             //  市电供应情况下的初始化//
 295   2              #if((_METER_TYPE_CFG ==_METER_TYPE_1P2W_0) ||(_METER_TYPE_CFG ==_METER_TYPE_1P2W_1) )
 296   2              Proc_Initialize_systerm_normal_mode();    //  市电供应情况下的初始化//
 297   2              #endif
 298   2               
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 6   

 299   2          }
 300   1              
 301   1      }
 302          
 303          
 304          
 305          /****************************************************************
 306          Function:           Proc_judge_Power_down_process
 307          Description:       运行过程中的掉电检查函数
 308          Input:                  no
 309          Parameters:             no
 310          Returns:                        no                        
 311          Others:         
 312          ****************************************************************/
 313          void Proc_judge_Power_down_process(void)
 314          {
 315   1          if(CheckPOWERUP()==TRUE)   return;
 316   1      
 317   1          Lib_Delay_ms(100);  
 318   1          CLRWDT();
 319   1          
 320   1          if(CheckPOWERUP()==TRUE)   return;  
 321   1          Lib_Delay_ms(100);  
 322   1          CLRWDT();
 323   1          E2p_IIC_Initail();
 324   1          E2p_Stop_i2c();             
 325   1              
 326   1              //save data-------------------------------
 327   1          mem_db_write(ADR_BLOCK00_EC_L0_E2P,&gs_energy_user_data.us_val[0][0].buf[0],LEN_EC_CURRENT,MEM_E2P1);
 328   1          mem_db_write(ADR_METER_VAR_RTC, &gs_CurDateTime.Week, 7, MEM_E2P1);
 329   1          CLRWDT();
 330   1         gs_even_fun_var.into_cnt[ID_CLASS_II_PWN-ID_CLASS_II_min]=4;  // 事件保持时间传人ID - 0-6
 331   1               api_deal_even_class_recode(ID_CLASS_II_PWN,START);     
 332   1              
 333   1               gs_even_fun_var.into_cnt[ID_CLASS_II_L1reverse-ID_CLASS_II_min]=4;  // 事件保持时间 二类事件序号
 334   1               gs_even_fun_var.esc_cnt[ID_CLASS_II_L1reverse-ID_CLASS_II_min]=4;  // 事件保持时间
 335   1               api_deal_even_class_recode(ID_CLASS_II_L1reverse,END);
 336   1      
 337   1              
 338   1                      
 339   1          api_Measure_ram_INIT();
 340   1          //api_handl_dis_sleep();
 341   1      
 342   1      //    mem_read(&gs_even_fun_var.even_fun_doingflg[ID_CLASS_II_COVER-ID_CLASS_II_min],ADR_CLASS2FLG_START_E
             -2P+ (ID_CLASS_II_COVER-ID_CLASS_II_min)* LEN_CLASSII_flg,LEN_CLASSII_flg,MEM_E2P1);   
 343   1      //              
 344   1          Init_GPIO_sleep();
 345   1          
 346   1          KEY_DIS_INITLIZE();
 347   1      
 348   1                KEY_ERR_COVER_INITLIZE() ;
 349   1          E2p_IIC_Initail();
 350   1          E2p_Stop_i2c();             
 351   1              
 352   1          api_handl_dis_sleep();            //下电液晶显示处理 //
 353   1          if(CheckPOWERUP()==TRUE)     sys_err();   
 354   1          
 355   1          SetExtRTC(0x01,0x00);// 小时唤醒
 356   1          Set_McuSleep();       // 处理结束后休眠 //
 357   1          Set_McuSleep();       // 处理结束后休眠 //
 358   1          
 359   1      }
C51 COMPILER V9.01   PROC_SYSTEM_INITIALIZE                                                01/31/2019 11:34:15 PAGE 7   

 360          
 361          
 362          /****************************************************************
 363          Function:               void sys_err(void)
 364          Description:            系统错误后的看门狗复位处理
 365          Input:                  no
 366          Parameters:             no
 367          Returns:                        no                        
 368          Others:         
 369          ****************************************************************/
 370          void sys_err(void)
 371          {  
 372   1          CLRWDT();
 373   1      
 374   1          while(1)
 375   1          {
 376   2                      NOP();
 377   2                      NOP();
 378   2                      NOP();
 379   2          }  
 380   1      }
 381          
 382          
 383          
 384          /***************************************************************
 385          *    END
 386          ****************************************************************/
 387          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    657    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
